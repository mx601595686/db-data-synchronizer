"use strict";
const _ = require("lodash");
const MysqlConnection_1 = require("./MysqlConnection");
/**
 * 数据库数据同步工具
 */
class DbDataSynchronizer {
    constructor() { }
    /**
     * 初始化数据库连接
     */
    static async init(param) {
        const synchronizer = new DbDataSynchronizer();
        synchronizer._connection = await MysqlConnection_1.getMysqlConnection(param);
        return synchronizer;
    }
    sync(sql, params) {
        return {
            to: (dbName, tableName) => {
                return new Promise((resolve, reject) => {
                    let syncSql; //同步数据sql
                    this._connection.remote.query(sql, params)
                        .on('error', reject)
                        .on('fields', fields => {
                        syncSql = "\
                                INSERT INTO`" + dbName + "`.`" + tableName + "`\
                                (" + fields.map(v => "`" + v.name + "`").join(',') + ")\
                                VALUES\
                                (" + fields.map(v => '?').join(',') + ")\
                                ON DUPLICATE KEY UPDATE\
                                " + fields.map(v => "`" + v.name + "` = ?").join(',') + "\
                            ";
                    })
                        .on('result', row => {
                        this._connection.remote.pause();
                        this._connection.local.query(syncSql, [..._.values(row), ..._.values(row)], (err) => {
                            if (err) {
                                this._connection.remote.end();
                                this._connection.local.end();
                                reject(err);
                            }
                            else {
                                this._connection.remote.resume();
                            }
                        });
                    })
                        .on('end', resolve);
                });
            }
        };
    }
}
module.exports = DbDataSynchronizer;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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dCAqIGFzIF8gZnJvbSAnbG9kYXNoJztcclxuXHJcbmltcG9ydCB7IENvbm5lY3Rpb25QYXJhbWV0ZXIgfSBmcm9tICcuL0Nvbm5lY3Rpb25QYXJhbWV0ZXInO1xyXG5pbXBvcnQgeyBnZXRNeXNxbENvbm5lY3Rpb24sIE15c3FsQ29ubmVjdGlvbiB9IGZyb20gJy4vTXlzcWxDb25uZWN0aW9uJztcclxuXHJcbi8qKlxyXG4gKiDmlbDmja7lupPmlbDmja7lkIzmraXlt6XlhbdcclxuICovXHJcbmNsYXNzIERiRGF0YVN5bmNocm9uaXplciB7XHJcblxyXG4gICAgcHJpdmF0ZSBfY29ubmVjdGlvbjogTXlzcWxDb25uZWN0aW9uOyAgIC8v5pWw5o2u5bqT6L+e5o6lXHJcblxyXG4gICAgcHJpdmF0ZSBjb25zdHJ1Y3RvcigpIHsgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5Yid5aeL5YyW5pWw5o2u5bqT6L+e5o6lXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBhc3luYyBpbml0KHBhcmFtOiBDb25uZWN0aW9uUGFyYW1ldGVyKSB7XHJcbiAgICAgICAgY29uc3Qgc3luY2hyb25pemVyID0gbmV3IERiRGF0YVN5bmNocm9uaXplcigpO1xyXG4gICAgICAgIHN5bmNocm9uaXplci5fY29ubmVjdGlvbiA9IGF3YWl0IGdldE15c3FsQ29ubmVjdGlvbihwYXJhbSk7XHJcbiAgICAgICAgcmV0dXJuIHN5bmNocm9uaXplcjtcclxuICAgIH1cclxuXHJcbiAgICBzeW5jKHNxbDogc3RyaW5nLCBwYXJhbXM/OiBhbnlbXSkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHRvOiAoZGJOYW1lOiBzdHJpbmcsIHRhYmxlTmFtZTogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBzeW5jU3FsOiBzdHJpbmc7ICAgIC8v5ZCM5q2l5pWw5o2uc3FsXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2Nvbm5lY3Rpb24ucmVtb3RlLnF1ZXJ5KHNxbCwgcGFyYW1zKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAub24oJ2Vycm9yJywgcmVqZWN0KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAub24oJ2ZpZWxkcycsIGZpZWxkcyA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzeW5jU3FsID0gXCJcXFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIElOU0VSVCBJTlRPYFwiKyBkYk5hbWUgKyBcImAuYFwiICsgdGFibGVOYW1lICsgXCJgXFxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoXCIrIGZpZWxkcy5tYXAodiA9PiBcImBcIiArIHYubmFtZSArIFwiYFwiKS5qb2luKCcsJykgKyBcIilcXFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZBTFVFU1xcXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKFwiKyBmaWVsZHMubWFwKHYgPT4gJz8nKS5qb2luKCcsJykgKyBcIilcXFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9OIERVUExJQ0FURSBLRVkgVVBEQVRFXFxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIisgZmllbGRzLm1hcCh2ID0+IFwiYFwiICsgdi5uYW1lICsgXCJgID0gP1wiKS5qb2luKCcsJykgKyBcIlxcXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgLm9uKCdyZXN1bHQnLCByb3cgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY29ubmVjdGlvbi5yZW1vdGUucGF1c2UoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jb25uZWN0aW9uLmxvY2FsLnF1ZXJ5KHN5bmNTcWwsIFsuLi5fLnZhbHVlcyhyb3cpLCAuLi5fLnZhbHVlcyhyb3cpXSwgKGVycikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlcnIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY29ubmVjdGlvbi5yZW1vdGUuZW5kKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2Nvbm5lY3Rpb24ubG9jYWwuZW5kKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2Nvbm5lY3Rpb24ucmVtb3RlLnJlc3VtZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAub24oJ2VuZCcsIHJlc29sdmUpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCA9IERiRGF0YVN5bmNocm9uaXplcjsiXX0=
