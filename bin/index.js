"use strict";
const _ = require("lodash");
const MysqlConnection_1 = require("./MysqlConnection");
/**
 * 数据库数据同步工具
 */
class DbDataSynchronizer {
    constructor(_conParam) {
        this._conParam = _conParam;
    }
    /**
     * 真正执行同步的方法
     */
    _synchronizer(sql, params, dbName, tableName) {
        return MysqlConnection_1.getMysqlConnection(this._conParam).then(connection => new Promise((resolve, reject) => {
            let updateSql; //更新本地数据sql
            connection.remote.query(sql, params)
                .on('error', reject)
                .on('fields', fields => {
                //检索查询时指定的数据库名和表名
                if (dbName == null)
                    dbName = fields[0].db;
                if (tableName == null)
                    tableName = fields[0].table;
                updateSql = "\
                        INSERT INTO`" + dbName + "`.`" + tableName + "`\
                        (" + fields.map(v => "`" + v.name + "`").join(',') + ")\
                        VALUES\
                        (" + fields.map(v => '?').join(',') + ")\
                        ON DUPLICATE KEY UPDATE\
                        " + fields.map(v => "`" + v.name + "` = ?").join(',') + "\
                    ";
            })
                .on('result', row => {
                connection.remote.pause();
                connection.local.query(updateSql, [..._.values(row), ..._.values(row)], (err) => {
                    if (err) {
                        connection.remote.destroy();
                        connection.local.destroy();
                        reject(err);
                    }
                    else {
                        connection.remote.resume();
                    }
                });
            })
                .on('end', () => {
                connection.remote.destroy();
                connection.local.destroy();
                resolve();
            });
        }));
    }
    /**
     * 查询远端服务器上的数据
     * @param sql 在远端执行的SQL
     * @param params SQL参数
     */
    sync(sql, params) {
        return {
            /**
             * 指定数据保存的位置
             * @param dbName 要保存到本地的数据库名称，默认与查询时指定的数据库名相同
             * @param tableName 要保存到本地的表名称，默认与查询时指定的表名相同
             */
            to: this._synchronizer.bind(this, sql, params)
        };
    }
}
module.exports = DbDataSynchronizer;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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ZCxDQUFDLENBQUMsQ0FBQztRQUNYLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDUixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILElBQUksQ0FBQyxHQUFXLEVBQUUsTUFBYztRQUM1QixNQUFNLENBQUM7WUFDSDs7OztlQUlHO1lBQ0gsRUFBRSxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsTUFBTSxDQUFDO1NBQ2pELENBQUE7SUFDTCxDQUFDO0NBQ0o7QUFFRCxpQkFBUyxrQkFBa0IsQ0FBQyIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIF8gZnJvbSAnbG9kYXNoJztcclxuXHJcbmltcG9ydCB7IENvbm5lY3Rpb25QYXJhbWV0ZXIgfSBmcm9tICcuL0Nvbm5lY3Rpb25QYXJhbWV0ZXInO1xyXG5pbXBvcnQgeyBnZXRNeXNxbENvbm5lY3Rpb24sIE15c3FsQ29ubmVjdGlvbiB9IGZyb20gJy4vTXlzcWxDb25uZWN0aW9uJztcclxuXHJcbi8qKlxyXG4gKiDmlbDmja7lupPmlbDmja7lkIzmraXlt6XlhbdcclxuICovXHJcbmNsYXNzIERiRGF0YVN5bmNocm9uaXplciB7XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBfY29uUGFyYW06IENvbm5lY3Rpb25QYXJhbWV0ZXIpIHsgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog55yf5q2j5omn6KGM5ZCM5q2l55qE5pa55rOVXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgX3N5bmNocm9uaXplcihzcWw6IHN0cmluZywgcGFyYW1zPzogYW55W10sIGRiTmFtZT86IHN0cmluZywgdGFibGVOYW1lPzogc3RyaW5nKSB7XHJcbiAgICAgICAgcmV0dXJuIGdldE15c3FsQ29ubmVjdGlvbih0aGlzLl9jb25QYXJhbSkudGhlbihjb25uZWN0aW9uID0+IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgbGV0IHVwZGF0ZVNxbDogc3RyaW5nOyAgICAvL+abtOaWsOacrOWcsOaVsOaNrnNxbFxyXG5cclxuICAgICAgICAgICAgY29ubmVjdGlvbi5yZW1vdGUucXVlcnkoc3FsLCBwYXJhbXMpXHJcbiAgICAgICAgICAgICAgICAub24oJ2Vycm9yJywgcmVqZWN0KVxyXG4gICAgICAgICAgICAgICAgLm9uKCdmaWVsZHMnLCBmaWVsZHMgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIC8v5qOA57Si5p+l6K+i5pe25oyH5a6a55qE5pWw5o2u5bqT5ZCN5ZKM6KGo5ZCNXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRiTmFtZSA9PSBudWxsKSBkYk5hbWUgPSBmaWVsZHNbMF0uZGI7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhYmxlTmFtZSA9PSBudWxsKSB0YWJsZU5hbWUgPSBmaWVsZHNbMF0udGFibGU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZVNxbCA9IFwiXFxcclxuICAgICAgICAgICAgICAgICAgICAgICAgSU5TRVJUIElOVE9gXCIrIGRiTmFtZSArIFwiYC5gXCIgKyB0YWJsZU5hbWUgKyBcImBcXFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAoXCIrIGZpZWxkcy5tYXAodiA9PiBcImBcIiArIHYubmFtZSArIFwiYFwiKS5qb2luKCcsJykgKyBcIilcXFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBWQUxVRVNcXFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAoXCIrIGZpZWxkcy5tYXAodiA9PiAnPycpLmpvaW4oJywnKSArIFwiKVxcXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIE9OIERVUExJQ0FURSBLRVkgVVBEQVRFXFxcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCIrIGZpZWxkcy5tYXAodiA9PiBcImBcIiArIHYubmFtZSArIFwiYCA9ID9cIikuam9pbignLCcpICsgXCJcXFxyXG4gICAgICAgICAgICAgICAgICAgIFwiO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC5vbigncmVzdWx0Jywgcm93ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25uZWN0aW9uLnJlbW90ZS5wYXVzZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjb25uZWN0aW9uLmxvY2FsLnF1ZXJ5KHVwZGF0ZVNxbCwgWy4uLl8udmFsdWVzKHJvdyksIC4uLl8udmFsdWVzKHJvdyldLCAoZXJyKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlcnIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24ucmVtb3RlLmRlc3Ryb3koKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24ubG9jYWwuZGVzdHJveSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25uZWN0aW9uLnJlbW90ZS5yZXN1bWUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC5vbignZW5kJywgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24ucmVtb3RlLmRlc3Ryb3koKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25uZWN0aW9uLmxvY2FsLmRlc3Ryb3koKTtcclxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICB9KSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmn6Xor6Lov5znq6/mnI3liqHlmajkuIrnmoTmlbDmja5cclxuICAgICAqIEBwYXJhbSBzcWwg5Zyo6L+c56uv5omn6KGM55qEU1FMXHJcbiAgICAgKiBAcGFyYW0gcGFyYW1zIFNRTOWPguaVsFxyXG4gICAgICovXHJcbiAgICBzeW5jKHNxbDogc3RyaW5nLCBwYXJhbXM/OiBhbnlbXSkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiDmjIflrprmlbDmja7kv53lrZjnmoTkvY3nva5cclxuICAgICAgICAgICAgICogQHBhcmFtIGRiTmFtZSDopoHkv53lrZjliLDmnKzlnLDnmoTmlbDmja7lupPlkI3np7DvvIzpu5jorqTkuI7mn6Xor6Lml7bmjIflrprnmoTmlbDmja7lupPlkI3nm7jlkIxcclxuICAgICAgICAgICAgICogQHBhcmFtIHRhYmxlTmFtZSDopoHkv53lrZjliLDmnKzlnLDnmoTooajlkI3np7DvvIzpu5jorqTkuI7mn6Xor6Lml7bmjIflrprnmoTooajlkI3nm7jlkIxcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIHRvOiB0aGlzLl9zeW5jaHJvbml6ZXIuYmluZCh0aGlzLCBzcWwsIHBhcmFtcylcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCA9IERiRGF0YVN5bmNocm9uaXplcjsiXX0=
